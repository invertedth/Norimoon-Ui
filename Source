-- Norimoon UI - Universal (PC & Mobile)
-- By: Your Name Here
-- GitHub: https://github.com/invertedth/Norimoon-Ui

local Norimoon = {}
Norimoon.__index = Norimoon

-- Universal color scheme
local Colors = {
    Background = Color3.fromRGB(18, 18, 24),
    Header = Color3.fromRGB(12, 12, 16),
    Primary = Color3.fromRGB(45, 85, 155),
    Secondary = Color3.fromRGB(35, 35, 45),
    Text = Color3.fromRGB(240, 240, 240),
    Accent = Color3.fromRGB(100, 180, 255),
    ToggleOn = Color3.fromRGB(80, 220, 120),
    ToggleOff = Color3.fromRGB(60, 60, 70),
    Stroke = Color3.fromRGB(50, 50, 60),
    Highlight = Color3.fromRGB(80, 120, 200),
    Shadow = Color3.fromRGB(0, 0, 0, 0.5)
}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local PlayerGui = Players.LocalPlayer:WaitForChild("PlayerGui")

-- Universal settings
local IsMobile = UserInputService.TouchEnabled
local IsConsole = UserInputService.GamepadEnabled
local IsDesktop = not IsMobile and not IsConsole

-- Animation profiles
local TweenInfo = {
    Fast = TweenInfo.new(0.15, Enum.EasingStyle.Quad),
    Medium = TweenInfo.new(0.25, Enum.EasingStyle.Quad),
    Slow = TweenInfo.new(0.35, Enum.EasingStyle.Quad)
}

-- Create new universal UI instance
function Norimoon.new(options)
    options = options or {}
    local self = setmetatable({}, Norimoon)
    
    -- Core UI elements
    self.screenGui = Instance.new("ScreenGui")
    self.screenGui.Name = "NorimoonUniversal_"..math.random(1000,9999)
    self.screenGui.ResetOnSpawn = false
    self.screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.screenGui.IgnoreGuiInset = IsMobile -- Important for mobile
    self.screenGui.Parent = PlayerGui

    -- Adjust sizing based on platform
    local baseWidth = IsMobile and 380 or 450
    local baseHeight = IsMobile and 500 or 550
    
    -- Main window with responsive sizing
    self.mainFrame = Instance.new("Frame")
    self.mainFrame.Size = UDim2.new(0, baseWidth, 0, baseHeight)
    self.mainFrame.Position = IsMobile and UDim2.new(0.5, -baseWidth/2, 0.5, -baseHeight/2) or UDim2.new(0, 30, 0.5, -baseHeight/2)
    self.mainFrame.AnchorPoint = Vector2.new(IsMobile and 0.5 or 0, 0.5)
    self.mainFrame.BackgroundColor3 = Colors.Background
    self.mainFrame.BorderSizePixel = 0
    self.mainFrame.Parent = self.screenGui

    -- Universal window effects
    local corner = Instance.new("UICorner", self.mainFrame)
    corner.CornerRadius = UDim.new(0, 8)
    
    local stroke = Instance.new("UIStroke", self.mainFrame)
    stroke.Color = Colors.Stroke
    stroke.Thickness = 2
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    
    -- Header with platform-appropriate sizing
    self.header = Instance.new("Frame", self.mainFrame)
    self.header.Size = UDim2.new(1, 0, 0, IsMobile and 36 or 40)
    self.header.Position = UDim2.new(0, 0, 0, 0)
    self.header.BackgroundColor3 = Colors.Header
    self.header.BorderSizePixel = 0
    
    local headerCorner = Instance.new("UICorner", self.header)
    headerCorner.CornerRadius = UDim.new(0, 8)
    headerCorner.Name = "HeaderCorner"

    -- Universal title
    self.title = Instance.new("TextLabel", self.header)
    self.title.Size = UDim2.new(1, -100, 1, 0)
    self.title.Position = UDim2.new(0, 50, 0, 0)
    self.title.BackgroundTransparency = 1
    self.title.Text = options.Name or "UNIVERSAL HUB"
    self.title.TextColor3 = Colors.Accent
    self.title.Font = Enum.Font.GothamBold
    self.title.TextSize = IsMobile and 16 or 18
    self.title.TextXAlignment = Enum.TextXAlignment.Left

    -- Universal close button
    self.closeBtn = self:CreateUniversalButton("Ã—", UDim2.new(0, 30, 0, 30), UDim2.new(1, -40, 0.5, -15))
    self.closeBtn.Parent = self.header
    self.closeBtn.TextColor3 = Color3.fromRGB(255, 80, 80)

    -- Universal minimize button
    self.minimizeBtn = self:CreateUniversalButton("-", UDim2.new(0, 30, 0, 30), UDim2.new(1, -80, 0.5, -15))
    self.minimizeBtn.Parent = self.header

    -- Universal tab system
    self.tabBar = Instance.new("Frame", self.mainFrame)
    self.tabBar.Size = UDim2.new(1, -20, 0, IsMobile and 32 or 36)
    self.tabBar.Position = UDim2.new(0, 10, 0, IsMobile and 40 or 45)
    self.tabBar.BackgroundTransparency = 1

    -- Universal content area
    self.contentArea = Instance.new("Frame", self.mainFrame)
    self.contentArea.Size = UDim2.new(1, -20, 1, -(IsMobile and 80 or 90))
    self.contentArea.Position = UDim2.new(0, 10, 0, IsMobile and 75 or 85)
    self.contentArea.BackgroundTransparency = 1
    self.contentArea.ClipsDescendants = true

    -- Initialize tabs
    self.tabs = {}
    self.currentTab = nil

    -- Set up universal interactions
    self:SetupUniversalInteractions()

    return self
end

-- Create universal button that works on all platforms
function Norimoon:CreateUniversalButton(text, size, position)
    local btn = Instance.new("TextButton")
    btn.Size = size
    btn.Position = position
    btn.Text = text
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = IsMobile and 14 or 16
    btn.TextColor3 = Colors.Text
    btn.BackgroundColor3 = Colors.Secondary
    btn.AutoButtonColor = false
    
    -- Universal button styling
    local corner = Instance.new("UICorner", btn)
    corner.CornerRadius = UDim.new(0, 6)
    
    local stroke = Instance.new("UIStroke", btn)
    stroke.Color = Colors.Stroke
    stroke.Thickness = 1
    
    -- Universal button interactions
    btn.MouseEnter:Connect(function()
        if not IsMobile then
            TweenService:Create(btn, TweenInfo.Fast, {BackgroundColor3 = Colors.Highlight}):Play()
        end
    end)
    
    btn.MouseLeave:Connect(function()
        if not IsMobile then
            TweenService:Create(btn, TweenInfo.Fast, {BackgroundColor3 = Colors.Secondary}):Play()
        end
    end)
    
    btn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            TweenService:Create(btn, TweenInfo.Fast, {Size = size - UDim2.new(0, 2, 0, 2)}):Play()
        end
    end)
    
    btn.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            TweenService:Create(btn, TweenInfo.Fast, {Size = size}):Play()
        end
    end)
    
    return btn
end

-- Universal interaction setup
function Norimoon:SetupUniversalInteractions()
    -- Dragging implementation for all platforms
    local dragging, dragInput, dragStart, startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
        TweenService:Create(self.mainFrame, TweenInfo.Medium, {Position = newPos}):Play()
    end
    
    -- Connect to all possible drag areas
    local dragAreas = {self.header, self.title}
    for _, area in pairs(dragAreas) do
        area.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = self.mainFrame.Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        
        area.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
    end
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input == dragInput) then
            updateInput(input)
        end
    end)
    
    -- Close button functionality
    self.closeBtn.MouseButton1Click:Connect(function()
        self:Destroy()
    end)
    
    -- Minimize button functionality
    self.minimizeBtn.MouseButton1Click:Connect(function()
        self.mainFrame.Visible = false
        -- Show reopen button for mobile
        if IsMobile then
            -- Implement mobile-specific reopen button
        end
    end)
    
    -- Universal toggle shortcut (Ctrl+M for mobile/desktop)
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.M and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            self.mainFrame.Visible = not self.mainFrame.Visible
        end
    end)
end

-- Universal tab creation
function Norimoon:CreateTab(name)
    local tab = {
        Name = name,
        Container = Instance.new("ScrollingFrame")
    }
    
    -- Configure container for all platforms
    tab.Container.Name = name
    tab.Container.Size = UDim2.new(1, 0, 1, 0)
    tab.Container.Position = UDim2.new(0, 0, 0, 0)
    tab.Container.BackgroundTransparency = 1
    tab.Container.Visible = false
    tab.Container.Parent = self.contentArea
    tab.Container.ScrollBarThickness = IsMobile and 6 or 8
    tab.Container.ScrollBarImageColor3 = Colors.Stroke
    tab.Container.AutomaticCanvasSize = Enum.AutomaticSize.Y
    
    -- Universal layout
    local layout = Instance.new("UIListLayout", tab.Container)
    layout.Padding = UDim.new(0, IsMobile and 6 or 8)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    
    local padding = Instance.new("UIPadding", tab.Container)
    padding.PaddingLeft = UDim.new(0, IsMobile and 8 or 10)
    padding.PaddingRight = UDim.new(0, IsMobile and 8 or 10)
    padding.PaddingTop = UDim.new(0, IsMobile and 6 or 8)
    padding.PaddingBottom = UDim.new(0, IsMobile and 6 or 8)
    
    -- Create tab button with platform-appropriate sizing
    local tabBtn = Instance.new("TextButton")
    tabBtn.Name = name
    tabBtn.Text = name
    tabBtn.Font = Enum.Font.GothamBold
    tabBtn.TextSize = IsMobile and 14 or 16
    tabBtn.TextColor3 = Colors.Text
    tabBtn.BackgroundColor3 = Colors.Secondary
    tabBtn.AutoButtonColor = false
    tabBtn.Size = UDim2.new(0, self.tabBar.AbsoluteSize.X / 4, 1, 0) -- Evenly distribute
    tabBtn.Position = UDim2.new((#self.tabs)/4, 0, 0, 0)
    tabBtn.Parent = self.tabBar
    tabBtn.TextWrapped = true
    
    -- Tab button styling
    local corner = Instance.new("UICorner", tabBtn)
    corner.CornerRadius = UDim.new(0, 6)
    
    local stroke = Instance.new("UIStroke", tabBtn)
    stroke.Color = Colors.Stroke
    stroke.Thickness = 1
    
    -- Tab button interactions
    tabBtn.MouseButton1Click:Connect(function()
        self:SetTab(name)
    end)
    
    -- Add to tabs table
    table.insert(self.tabs, tab)
    
    -- Set as current tab if first tab
    if #self.tabs == 1 then
        self:SetTab(name)
    end
    
    return tab
end

-- Set active tab (universal)
function Norimoon:SetTab(name)
    for _, tab in pairs(self.tabs) do
        local isActive = tab.Name == name
        tab.Container.Visible = isActive
        
        -- Update tab button appearance
        local tabBtn = self.tabBar:FindFirstChild(tab.Name)
        if tabBtn then
            TweenService:Create(tabBtn, TweenInfo.Fast, {
                BackgroundColor3 = isActive and Colors.Primary or Colors.Secondary,
                TextColor3 = isActive and Colors.Text or Color3.fromRGB(200, 200, 200)
            }):Play()
        end
    end
    
    self.currentTab = name
end

-- Universal section creation
function Norimoon:AddSection(title, tabName)
    tabName = tabName or self.currentTab
    local tab = self:GetTab(tabName)
    if not tab then return nil end
    
    local section = Instance.new("TextLabel")
    section.Text = " " .. title
    section.Font = Enum.Font.GothamBold
    section.TextSize = IsMobile and 14 or 16
    section.TextXAlignment = Enum.TextXAlignment.Left
    section.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    section.BackgroundTransparency = 0
    section.Size = UDim2.new(1, 0, 0, IsMobile and 22 or 24)
    section.TextColor3 = Colors.Accent
    section.Parent = tab.Container
    
    -- Section styling
    local corner = Instance.new("UICorner", section)
    corner.CornerRadius = UDim.new(0, 6)
    
    local stroke = Instance.new("UIStroke", section)
    stroke.Color = Colors.Stroke
    stroke.Thickness = 1
    
    return section
end

-- Universal button creation
function Norimoon:AddButton(options)
    options = options or {}
    local tab = self:GetTab(options.Tab or self.currentTab)
    if not tab then return nil end
    
    local btn = Instance.new("TextButton")
    btn.Text = options.Text or "Button"
    btn.Font = Enum.Font.Gotham
    btn.TextSize = IsMobile and 14 or 16
    btn.BackgroundColor3 = Colors.Primary
    btn.TextColor3 = Colors.Text
    btn.Size = UDim2.new(1, 0, 0, IsMobile and 26 or 28)
    btn.AutoButtonColor = false
    btn.Parent = tab.Container
    
    -- Button styling
    local corner = Instance.new("UICorner", btn)
    corner.CornerRadius = UDim.new(0, 6)
    
    local stroke = Instance.new("UIStroke", btn)
    stroke.Color = Colors.Stroke
    stroke.Thickness = 1
    
    -- Universal button interactions
    btn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            TweenService:Create(btn, TweenInfo.Fast, {BackgroundColor3 = Colors.Highlight}):Play()
        end
    end)
    
    btn.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            TweenService:Create(btn, TweenInfo.Fast, {BackgroundColor3 = Colors.Primary}):Play()
            if options.Callback then
                options.Callback()
            end
        end
    end)
    
    return btn
end

-- Universal toggle creation
function Norimoon:AddToggle(options)
    options = options or {}
    local tab = self:GetTab(options.Tab or self.currentTab)
    if not tab then return nil end
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 0, IsMobile and 30 or 34)
    frame.BackgroundTransparency = 1
    frame.Parent = tab.Container
    
    local lbl = Instance.new("TextLabel")
    lbl.Text = options.Text or "Toggle"
    lbl.Font = Enum.Font.Gotham
    lbl.TextSize = IsMobile and 14 or 16
    lbl.TextColor3 = Colors.Text
    lbl.BackgroundTransparency = 1
    lbl.Size = UDim2.new(0.75, -10, 1, 0)
    lbl.Position = UDim2.new(0, 8, 0, 0)
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.Parent = frame
    
    -- Toggle switch with platform-appropriate sizing
    local toggle = Instance.new("Frame")
    toggle.Size = UDim2.new(0, IsMobile and 44 or 48, 0, IsMobile and 20 or 24)
    toggle.Position = UDim2.new(1, -54, 0.5, -toggle.Size.Y.Offset/2)
    toggle.BackgroundColor3 = options.Default and Colors.ToggleOn or Colors.ToggleOff
    toggle.Parent = frame
    toggle.BorderSizePixel = 0
    
    local tCorner = Instance.new("UICorner", toggle)
    tCorner.CornerRadius = UDim.new(1, 0)
    
    local switch = Instance.new("Frame", toggle)
    switch.Size = UDim2.new(0, toggle.Size.Y.Offset - 4, 0, toggle.Size.Y.Offset - 4)
    switch.Position = options.Default and UDim2.new(1, -switch.Size.X.Offset - 2, 0, 2) or UDim2.new(0, 2, 0, 2)
    switch.BackgroundColor3 = Color3.new(1, 1, 1)
    switch.BorderSizePixel = 0
    
    local swCorner = Instance.new("UICorner", switch)
    swCorner.CornerRadius = UDim.new(1, 0)
    
    -- Toggle state
    local toggled = options.Default or false
    
    -- Function to update toggle state
    local function set(value)
        toggled = value
        TweenService:Create(toggle, TweenInfo.Fast, {
            BackgroundColor3 = toggled and Colors.ToggleOn or Colors.ToggleOff
        }):Play()
        
        TweenService:Create(switch, TweenInfo.Fast, {
            Position = toggled and UDim2.new(1, -switch.Size.X.Offset - 2, 0, 2) or UDim2.new(0, 2, 0, 2)
        }):Play()
        
        if options.Callback then
            options.Callback(toggled)
        end
    end
    
    -- Universal toggle interactions
    toggle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            TweenService:Create(toggle, TweenInfo.Fast, {
                BackgroundColor3 = toggled and Color3.fromRGB(100, 230, 130) or Color3.fromRGB(80, 80, 90)
            }):Play()
        end
    end)
    
    toggle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            set(not toggled)
        end
    end)
    
    return {
        Set = set,
        Get = function() return toggled end
    }
end

-- Universal slider creation
function Norimoon:AddSlider(options)
    options = options or {}
    local tab = self:GetTab(options.Tab or self.currentTab)
    if not tab then return nil end
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 0, IsMobile and 36 or 40)
    frame.BackgroundTransparency = 1
    frame.Parent = tab.Container
    
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Text = options.Text or "Slider"
    nameLabel.Font = Enum.Font.Gotham
    nameLabel.TextSize = IsMobile and 13 or 14
    nameLabel.TextColor3 = Colors.Text
    nameLabel.BackgroundTransparency = 1
    nameLabel.Size = UDim2.new(1, 0, 0, 16)
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = frame
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Text = tostring(options.Default or options.Min or 0)
    valueLabel.Font = Enum.Font.GothamBold
    valueLabel.TextSize = IsMobile and 13 or 14
    valueLabel.TextColor3 = Colors.Text
    valueLabel.BackgroundTransparency = 1
    valueLabel.Size = UDim2.new(0, 50, 0, 16)
    valueLabel.Position = UDim2.new(1, -50, 0, 0)
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Parent = frame
    
    local slider = Instance.new("Frame")
    slider.Size = UDim2.new(1, 0, 0, IsMobile and 5 or 6)
    slider.Position = UDim2.new(0, 0, 0, 20)
    slider.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    slider.Parent = frame
    
    local sliderCorner = Instance.new("UICorner", slider)
    sliderCorner.CornerRadius = UDim.new(1, 0)
    
    local fill = Instance.new("Frame")
    fill.Size = UDim2.new(0.5, 0, 1, 0)
    fill.BackgroundColor3 = Colors.Primary
    fill.Parent = slider
    
    local fillCorner = Instance.new("UICorner", fill)
    fillCorner.CornerRadius = UDim.new(1, 0)
    
    local handle = Instance.new("Frame")
    handle.Size = UDim2.new(0, IsMobile and 14 or 16, 0, IsMobile and 14 or 16)
    handle.Position = UDim2.new(0.5, -handle.Size.X.Offset/2, 0.5, -handle.Size.Y.Offset/2)
    handle.BackgroundColor3 = Colors.Text
    handle.Parent = slider
    
    local handleCorner = Instance.new("UICorner", handle)
    handleCorner.CornerRadius = UDim.new(1, 0)
    
    local handleStroke = Instance.new("UIStroke", handle)
    handleStroke.Color = Colors.Stroke
    handleStroke.Thickness = 1
    
    -- Slider values
    local min = options.Min or 0
    local max = options.Max or 100
    local value = math.clamp(options.Default or min, min, max)
    local dragging = false
    
    -- Update slider appearance
    local function updateSlider(val)
        value = math.clamp(val, min, max)
        local ratio = (value - min) / (max - min)
        
        TweenService:Create(fill, TweenInfo.Fast, {Size = UDim2.new(ratio, 0, 1, 0)}):Play()
        TweenService:Create(handle, TweenInfo.Fast, {Position = UDim2.new(ratio, -handle.Size.X.Offset/2, 0.5, -handle.Size.Y.Offset/2)}):Play()
        
        valueLabel.Text = options.Precise and string.format("%.2f", value) or tostring(math.floor(value))
        
        if options.Callback then
            options.Callback(value)
        end
    end
    
    -- Universal slider interactions
    local function updateValueFromInput(input)
        local sliderPos = slider.AbsolutePosition.X
        local sliderSize = slider.AbsoluteSize.X
        local relativePos = math.clamp((IsMobile and input.Position.X or input.Position.X) - sliderPos, 0, sliderSize)
        local ratio = relativePos / sliderSize
        local newValue = min + (max - min) * ratio
        updateSlider(newValue)
    end
    
    slider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            updateValueFromInput(input)
        end
    end)
    
    slider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    if IsMobile then
        UserInputService.TouchMoved:Connect(function(input)
            if dragging then
                updateValueFromInput(input)
            end
        end)
    else
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                updateValueFromInput(input)
            end
        end)
    end
    
    -- Set initial value
    updateSlider(value)
    
    return {
        Set = updateSlider,
        Get = function() return value end
    }
end

-- Helper function to get tab by name
function Norimoon:GetTab(name)
    for _, tab in pairs(self.tabs) do
        if tab.Name == name then
            return tab
        end
    end
    return nil
end

-- Universal destroy method
function Norimoon:Destroy()
    -- Smooth fade out
    TweenService:Create(self.mainFrame, TweenInfo.Medium, {Size = UDim2.new(0, 0, 0, 0)}):Play()
    task.wait(0.3)
    self.screenGui:Destroy()
end

return Norimoon
