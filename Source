-- Norimoon UI Library
-- By: Your Name Here
-- Features: Modern toggles, smooth animations, mobile support, drag anywhere

local Norimoon = {}
Norimoon.__index = Norimoon

-- Library setup
local player = game:GetService("Players").LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Colors
Norimoon.Colors = {
    Background = Color3.fromRGB(25, 25, 25),
    Primary = Color3.fromRGB(30, 50, 90),
    Secondary = Color3.fromRGB(60, 60, 60),
    Text = Color3.fromRGB(255, 255, 255),
    Accent = Color3.fromRGB(222, 211, 100),
    ToggleOn = Color3.fromRGB(80, 180, 80),
    ToggleOff = Color3.fromRGB(44, 44, 44)
}

-- Create a new Norimoon UI
function Norimoon.new(options)
    options = options or {}
    local self = setmetatable({}, Norimoon)
    
    -- Create main ScreenGui
    self.screenGui = Instance.new("ScreenGui")
    self.screenGui.Name = "NorimoonUI_" .. tostring(math.random(10000, 99999))
    self.screenGui.ResetOnSpawn = false
    self.screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.screenGui.Parent = playerGui
    
    -- Main window
    self.mainFrame = Instance.new("Frame")
    self.mainFrame.Size = UDim2.new(0, 420, 0, 470)
    self.mainFrame.Position = UDim2.new(0, 32, 0.35, 0)
    self.mainFrame.BackgroundColor3 = Norimoon.Colors.Background
    self.mainFrame.BorderSizePixel = 0
    self.mainFrame.Name = "Main"
    self.mainFrame.Parent = self.screenGui
    
    -- Rounded corners
    Instance.new("UICorner", self.mainFrame).CornerRadius = UDim.new(0, 18)
    
    -- Window stroke
    local mainFrameStroke = Instance.new("UIStroke", self.mainFrame)
    mainFrameStroke.Color = Color3.fromRGB(60, 60, 60)
    mainFrameStroke.Thickness = 2
    
    -- Title bar
    self.titleLabel = Instance.new("TextLabel")
    self.titleLabel.Size = UDim2.new(1, 0, 0, 38)
    self.titleLabel.Position = UDim2.new(0, 0, 0, 0)
    self.titleLabel.BackgroundTransparency = 1
    self.titleLabel.Text = options.Name or "Norimoon UI"
    self.titleLabel.TextColor3 = Norimoon.Colors.Accent
    self.titleLabel.Font = Enum.Font.GothamBold
    self.titleLabel.TextSize = 20
    self.titleLabel.TextXAlignment = Enum.TextXAlignment.Center
    self.titleLabel.TextYAlignment = Enum.TextYAlignment.Center
    self.titleLabel.Parent = self.mainFrame
    
    -- Tab bar
    self.tabBar = Instance.new("Frame")
    self.tabBar.Size = UDim2.new(1, 0, 0, 36)
    self.tabBar.Position = UDim2.new(0, 0, 0, 38)
    self.tabBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    self.tabBar.BorderSizePixel = 0
    self.tabBar.Parent = self.mainFrame
    Instance.new("UICorner", self.tabBar).CornerRadius = UDim.new(0, 15)
    
    -- Tab bar stroke
    local tabBarStroke = Instance.new("UIStroke", self.tabBar)
    tabBarStroke.Thickness = 2
    tabBarStroke.Color = Color3.fromRGB(55, 55, 55)
    
    -- Close button
    self.closeBtn = Instance.new("TextButton")
    self.closeBtn.Size = UDim2.new(0, 28, 0, 28)
    self.closeBtn.Position = UDim2.new(1, -31, 0, 3)
    self.closeBtn.Text = "Ã—"
    self.closeBtn.Font = Enum.Font.GothamBold
    self.closeBtn.TextSize = 16
    self.closeBtn.BackgroundColor3 = Color3.fromRGB(49, 49, 49)
    self.closeBtn.TextColor3 = Color3.fromRGB(255, 80, 80)
    self.closeBtn.Parent = self.mainFrame
    Instance.new("UICorner", self.closeBtn).CornerRadius = UDim.new(0, 7)
    
    -- Minimize button
    self.minimizeBtn = Instance.new("TextButton")
    self.minimizeBtn.Size = UDim2.new(0, 28, 0, 28)
    self.minimizeBtn.Position = UDim2.new(1, -62, 0, 3)
    self.minimizeBtn.Text = "-"
    self.minimizeBtn.Font = Enum.Font.GothamBold
    self.minimizeBtn.TextSize = 16
    self.minimizeBtn.BackgroundColor3 = Color3.fromRGB(49, 49, 49)
    self.minimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.minimizeBtn.Parent = self.mainFrame
    Instance.new("UICorner", self.minimizeBtn).CornerRadius = UDim.new(0, 7)
    
    -- Open UI button (shown when minimized)
    self.openUIButton = Instance.new("TextButton")
    self.openUIButton.Size = UDim2.new(0, 110, 0, 38)
    self.openUIButton.Position = UDim2.new(0, 16, 0.5, -19)
    self.openUIButton.AnchorPoint = Vector2.new(0, 0.5)
    self.openUIButton.Text = "Open UI"
    self.openUIButton.Font = Enum.Font.GothamBold
    self.openUIButton.TextSize = 20
    self.openUIButton.BackgroundColor3 = Norimoon.Colors.Primary
    self.openUIButton.TextColor3 = Norimoon.Colors.Text
    self.openUIButton.Visible = false
    self.openUIButton.Parent = self.screenGui
    Instance.new("UICorner", self.openUIButton).CornerRadius = UDim.new(0, 12)
    
    -- Tab management
    self.tabs = {}
    self.currentTab = nil
    
    -- Button click sounds
    if options.Sounds then
        self.clickSound = Instance.new("Sound")
        self.clickSound.SoundId = "rbxassetid://9046898041" -- Replace with your sound ID
        self.clickSound.Volume = 0.5
        self.clickSound.Parent = self.screenGui
    end
    
    -- Set up UI interactions
    self:SetupInteractions()
    
    return self
end

-- Set up window dragging and button interactions
function Norimoon:SetupInteractions()
    -- Toggle visibility
    self.minimizeBtn.MouseButton1Click:Connect(function()
        self.mainFrame.Visible = false
        self.openUIButton.Visible = true
        if self.clickSound then self.clickSound:Play() end
    end)
    
    self.openUIButton.MouseButton1Click:Connect(function()
        self.mainFrame.Visible = true
        self.openUIButton.Visible = false
        if self.clickSound then self.clickSound:Play() end
    end)
    
    -- Close UI
    self.closeBtn.MouseButton1Click:Connect(function()
        self:Destroy()
        if self.clickSound then self.clickSound:Play() end
    end)
    
    -- Keyboard toggle
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
            local showing = not self.mainFrame.Visible
            self.mainFrame.Visible = showing
            self.openUIButton.Visible = not showing
        end
    end)
    
    -- Dragging logic
    local dragging, dragInput, dragStart, startPos
    local dragAreas = {self.mainFrame, self.tabBar, self.titleLabel}
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        TweenService:Create(self.mainFrame, TweenInfo.new(0.1), {Position = newPos}):Play()
    end
    
    for _, dragArea in ipairs(dragAreas) do
        dragArea.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = self.mainFrame.Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        
        dragArea.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
    end
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input == dragInput) then
            updateInput(input)
        end
    end)
end

-- Create a new tab
function Norimoon:CreateTab(name)
    local tab = {
        Name = name,
        Container = Instance.new("ScrollingFrame")
    }
    
    -- Configure container
    tab.Container.Name = name
    tab.Container.Size = UDim2.new(1, 0, 1, -74)
    tab.Container.Position = UDim2.new(0, 0, 0, 74)
    tab.Container.BackgroundTransparency = 1
    tab.Container.Visible = false
    tab.Container.Parent = self.mainFrame
    tab.Container.ScrollBarThickness = 8
    tab.Container.ScrollBarImageColor3 = Color3.fromRGB(80, 80, 80)
    
    -- Automatic sizing
    local layout = Instance.new("UIListLayout", tab.Container)
    layout.Padding = UDim.new(0, 8)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    
    local padding = Instance.new("UIPadding", tab.Container)
    padding.PaddingLeft = UDim.new(0, 8)
    padding.PaddingRight = UDim.new(0, 8)
    padding.PaddingTop = UDim.new(0, 4)
    padding.PaddingBottom = UDim.new(0, 4)
    
    -- Create tab button
    local tabBtn = Instance.new("TextButton")
    tabBtn.Name = name
    tabBtn.Text = name
    tabBtn.Font = Enum.Font.GothamBold
    tabBtn.TextSize = 16
    tabBtn.TextColor3 = Norimoon.Colors.Text
    tabBtn.BackgroundColor3 = Norimoon.Colors.Secondary
    tabBtn.AutoButtonColor = false
    tabBtn.Size = UDim2.new(0, math.floor(self.mainFrame.Size.X.Offset / (#self.tabs + 1)), 1, 0)
    tabBtn.Position = UDim2.new(0, 0, 0, 0)
    tabBtn.Parent = self.tabBar
    Instance.new("UICorner", tabBtn).CornerRadius = UDim.new(0, 11)
    
    -- Button interactions
    tabBtn.MouseEnter:Connect(function()
        if self.currentTab ~= name then
            tabBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        end
    end)
    
    tabBtn.MouseLeave:Connect(function()
        if self.currentTab ~= name then
            tabBtn.BackgroundColor3 = Norimoon.Colors.Secondary
        end
    end)
    
    tabBtn.MouseButton1Click:Connect(function()
        self:SetTab(name)
        if self.clickSound then self.clickSound:Play() end
    end)
    
    -- Add to tabs table
    table.insert(self.tabs, tab)
    
    -- Set as current tab if first tab
    if #self.tabs == 1 then
        self:SetTab(name)
    end
    
    return tab
end

-- Set active tab
function Norimoon:SetTab(name)
    for _, tab in ipairs(self.tabs) do
        local isActive = tab.Name == name
        tab.Container.Visible = isActive
        
        -- Update tab button appearance
        local tabBtn = self.tabBar:FindFirstChild(tab.Name)
        if tabBtn then
            tabBtn.BackgroundColor3 = isActive and Color3.fromRGB(90, 90, 40) or Norimoon.Colors.Secondary
        end
    end
    
    self.currentTab = name
end

-- Add a section header
function Norimoon:AddSection(title, tabName)
    tabName = tabName or self.currentTab
    local tab = self:GetTab(tabName)
    if not tab then return nil end
    
    local section = Instance.new("TextLabel")
    section.Text = " " .. title
    section.Font = Enum.Font.GothamBold
    section.TextSize = 16
    section.TextXAlignment = Enum.TextXAlignment.Left
    section.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    section.BackgroundTransparency = 0
    section.Size = UDim2.new(1, -16, 0, 24)
    section.TextColor3 = Color3.new(1, 1, 0.6)
    section.Parent = tab.Container
    Instance.new("UICorner", section).CornerRadius = UDim.new(0, 12)
    
    return section
end

-- Add a button
function Norimoon:AddButton(options)
    options = options or {}
    local tab = self:GetTab(options.Tab or self.currentTab)
    if not tab then return nil end
    
    local btn = Instance.new("TextButton")
    btn.Text = options.Text or "Button"
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 16
    btn.BackgroundColor3 = Norimoon.Colors.Primary
    btn.TextColor3 = Norimoon.Colors.Text
    btn.Size = UDim2.new(1, -16, 0, 28)
    btn.AutoButtonColor = false
    btn.Parent = tab.Container
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 10)
    
    -- Button interactions
    btn.MouseEnter:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(40, 60, 100)}):Play()
    end)
    
    btn.MouseLeave:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.1), {BackgroundColor3 = Norimoon.Colors.Primary}):Play()
    end)
    
    btn.MouseButton1Click:Connect(function()
        if self.clickSound then self.clickSound:Play() end
        if options.Callback then
            options.Callback()
        end
    end)
    
    return btn
end

-- Add a toggle
function Norimoon:AddToggle(options)
    options = options or {}
    local tab = self:GetTab(options.Tab or self.currentTab)
    if not tab then return nil end
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, -16, 0, 34)
    frame.BackgroundTransparency = 1
    frame.Parent = tab.Container
    
    local lbl = Instance.new("TextLabel")
    lbl.Text = options.Text or "Toggle"
    lbl.Font = Enum.Font.Gotham
    lbl.TextSize = 16
    lbl.TextColor3 = Norimoon.Colors.Text
    lbl.BackgroundTransparency = 1
    lbl.Size = UDim2.new(0.75, -10, 1, 0)
    lbl.Position = UDim2.new(0, 8, 0, 0)
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.Parent = frame
    
    -- Toggle switch
    local toggle = Instance.new("Frame")
    toggle.Size = UDim2.new(0, 48, 0, 24)
    toggle.Position = UDim2.new(1, -54, 0.5, -12)
    toggle.BackgroundColor3 = options.Default and Norimoon.Colors.ToggleOn or Norimoon.Colors.ToggleOff
    toggle.Parent = frame
    toggle.BorderSizePixel = 0
    local tCorner = Instance.new("UICorner", toggle)
    tCorner.CornerRadius = UDim.new(1, 12)
    
    local switch = Instance.new("Frame", toggle)
    switch.Size = UDim2.new(0, 20, 0, 20)
    switch.Position = options.Default and UDim2.new(1, -22, 0, 2) or UDim2.new(0, 2, 0, 2)
    switch.BackgroundColor3 = Color3.new(1, 1, 1)
    switch.BorderSizePixel = 0
    local swCorner = Instance.new("UICorner", switch)
    swCorner.CornerRadius = UDim.new(1, 12)
    
    -- Toggle state
    local toggled = options.Default or false
    
    -- Function to update toggle state
    local function set(value)
        toggled = value
        toggle.BackgroundColor3 = toggled and Norimoon.Colors.ToggleOn or Norimoon.Colors.ToggleOff
        
        switch:TweenPosition(
            toggled and UDim2.new(1, -22, 0, 2) or UDim2.new(0, 2, 0, 2),
            Enum.EasingDirection.Out,
            Enum.EasingStyle.Quad,
            0.13,
            true
        )
        
        if options.Callback then
            options.Callback(toggled)
        end
    end
    
    -- Click interactions
    toggle.MouseEnter:Connect(function()
        if not toggled then
            TweenService:Create(toggle, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}):Play()
        else
            TweenService:Create(toggle, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(100, 210, 100)}):Play()
        end
    end)
    
    toggle.MouseLeave:Connect(function()
        if not toggled then
            TweenService:Create(toggle, TweenInfo.new(0.1), {BackgroundColor3 = Norimoon.Colors.ToggleOff}):Play()
        else
            TweenService:Create(toggle, TweenInfo.new(0.1), {BackgroundColor3 = Norimoon.Colors.ToggleOn}):Play()
        end
    end)
    
    toggle.MouseButton1Click:Connect(function()
        if self.clickSound then self.clickSound:Play() end
        set(not toggled)
    end)
    
    -- Return toggle control functions
    return {
        Set = set,
        Get = function() return toggled end
    }
end

-- Add a slider
function Norimoon:AddSlider(options)
    options = options or {}
    local tab = self:GetTab(options.Tab or self.currentTab)
    if not tab then return nil end
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, -16, 0, 40)
    frame.BackgroundTransparency = 1
    frame.Parent = tab.Container
    
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Text = options.Text or "Slider"
    nameLabel.Font = Enum.Font.Gotham
    nameLabel.TextSize = 14
    nameLabel.TextColor3 = Norimoon.Colors.Text
    nameLabel.BackgroundTransparency = 1
    nameLabel.Size = UDim2.new(1, 0, 0, 16)
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = frame
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Text = tostring(options.Default or options.Min or 0)
    valueLabel.Font = Enum.Font.GothamBold
    valueLabel.TextSize = 14
    valueLabel.TextColor3 = Norimoon.Colors.Text
    valueLabel.BackgroundTransparency = 1
    valueLabel.Size = UDim2.new(0, 50, 0, 16)
    valueLabel.Position = UDim2.new(1, -50, 0, 0)
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Parent = frame
    
    local slider = Instance.new("Frame")
    slider.Size = UDim2.new(1, 0, 0, 6)
    slider.Position = UDim2.new(0, 0, 0, 20)
    slider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    slider.Parent = frame
    Instance.new("UICorner", slider).CornerRadius = UDim.new(1, 0)
    
    local fill = Instance.new("Frame")
    fill.Size = UDim2.new(0.5, 0, 1, 0)
    fill.BackgroundColor3 = Norimoon.Colors.Primary
    fill.Parent = slider
    Instance.new("UICorner", fill).CornerRadius = UDim.new(1, 0)
    
    local handle = Instance.new("Frame")
    handle.Size = UDim2.new(0, 16, 0, 16)
    handle.Position = UDim2.new(0.5, -8, 0.5, -8)
    handle.BackgroundColor3 = Norimoon.Colors.Text
    handle.Parent = slider
    Instance.new("UICorner", handle).CornerRadius = UDim.new(1, 0)
    
    -- Slider values
    local min = options.Min or 0
    local max = options.Max or 100
    local value = math.clamp(options.Default or min, min, max)
    local dragging = false
    
    -- Update slider appearance
    local function updateSlider(val)
        value = math.clamp(val, min, max)
        local ratio = (value - min) / (max - min)
        fill.Size = UDim2.new(ratio, 0, 1, 0)
        handle.Position = UDim2.new(ratio, -8, 0.5, -8)
        valueLabel.Text = options.Precise and string.format("%.2f", value) or tostring(math.floor(value))
        
        if options.Callback then
            options.Callback(value)
        end
    end
    
    -- Mouse interactions
    local function updateValueFromMouse()
        local mousePos = UserInputService:GetMouseLocation().X
        local sliderPos = slider.AbsolutePosition.X
        local sliderSize = slider.AbsoluteSize.X
        local relativePos = math.clamp(mousePos - sliderPos, 0, sliderSize)
        local ratio = relativePos / sliderSize
        local newValue = min + (max - min) * ratio
        updateSlider(newValue)
    end
    
    slider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateValueFromMouse()
        end
    end)
    
    slider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateValueFromMouse()
        end
    end)
    
    -- Set initial value
    updateSlider(value)
    
    return {
        Set = updateSlider,
        Get = function() return value end
    }
end

-- Get tab by name
function Norimoon:GetTab(name)
    for _, tab in ipairs(self.tabs) do
        if tab.Name == name then
            return tab
        end
    end
    return nil
end

-- Destroy the UI
function Norimoon:Destroy()
    self.screenGui:Destroy()
end

return Norimoon
